{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Container/Container.js","App.js","redux/contacts/contacts-reducer.js","redux/store.js","index.js"],"names":["contactActions","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","getContacts","state","contacts","items","getFilter","filter","getfilteredItems","normalizedFilter","toLowerCase","includes","ContactForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","reset","handleChange","e","currentTarget","value","className","onSubmit","preventDefault","find","contact","alert","type","pattern","title","required","onChange","Filter","ContactListItem","onClick","ContactList","map","Container","children","App","length","itemsReducer","createReducer","filterReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","devtools","process","storeObj","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.5c9f5821.chunk.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nconst addContact = createAction(\"contacts/add\", ({ name, number }) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\nconst deleteContact = createAction(\"contacts/delete\");\nconst changeFilter = createAction(\"contacts/changeFilter\");\n\nconst contactActions = { addContact, deleteContact, changeFilter };\n\nexport default contactActions;\n","export const getContacts = (state) => state.contacts.items;\n\nexport const getFilter = (state) => state.contacts.filter;\n\nexport const getfilteredItems = (state) => {\n  const items = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n  return items.filter(({ name }) =>\n    name.toLowerCase().includes(normalizedFilter)\n  );\n};\n","import { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport contactActions from \"../../redux/contacts/contacts-actions\";\nimport { getContacts } from \"../../redux/contacts/contacts-selectors\";\nimport \"./ContactForm.scss\";\n\nconst ContactForm = () => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (contacts.find((contact) => contact.name === name)) {\n      alert(name + \" is already in contacts\");\n      reset();\n      return;\n    }\n    dispatch(contactActions.addContact({ name, number }));\n    reset();\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  const handleChange = (e) => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  return (\n    <form className=\"Form\" onSubmit={handleSubmit}>\n      <label>\n        <p className=\"Form__label\">Name:</p>\n        <input\n          className=\"Form__input\"\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          onChange={handleChange}\n          value={name}\n        />\n      </label>\n      <label>\n        <p className=\"Form__label\">Number:</p>\n        <input\n          className=\"Form__input\"\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n      <button className=\"Form__button\" type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport contactActions from \"../../redux/contacts/contacts-actions\";\nimport { getFilter } from \"../../redux/contacts/contacts-selectors\";\n\nimport \"./Filter.scss\";\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  return (\n    <label>\n      <p className=\"Filter__title\">Find contacts by name</p>\n      <input\n        className=\"Filter__input\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={(e) =>\n          dispatch(contactActions.changeFilter(e.currentTarget.value))\n        }\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch } from \"react-redux\";\nimport contactActions from \"../../redux/contacts/contacts-actions\";\nimport \"./ContactListItem.scss\";\n\nconst ContactListItem = ({ contact: { id, name, number } }) => {\n  const dispatch = useDispatch();\n  return (\n    <li className=\"Item\">\n      <p>\n        {name}: {number}\n      </p>\n      <button\n        className=\"Item__button\"\n        type=\"button\"\n        onClick={() => dispatch(contactActions.deleteContact(id))}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }).isRequired,\n};\n\nexport default ContactListItem;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ContactListItem from \"../ContactListItem\";\nimport { getfilteredItems } from \"../../redux/contacts/contacts-selectors\";\nimport \"./ContactList.scss\";\n\nconst ContactList = () => {\n  const contacts = useSelector(getfilteredItems);\n\n  return (\n    <ul className=\"ContactList\">\n      {contacts.map((contact) => (\n        <ContactListItem key={contact.id} contact={contact} />\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Container.scss\";\n\nconst Container = ({ children }) => {\n  return <div className=\"Container\">{children}</div>;\n};\n\nContainer.propTypes = {\n  children: PropTypes.node,\n};\n\nexport default Container;\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\nimport Container from \"./components/Container\";\nimport \"./App.scss\";\n\nconst App = () => {\n  const contacts = useSelector((state) => state.contacts.items);\n  return (\n    <Container>\n      <h1 className=\"title\">Phonebook</h1>\n      <ContactForm />\n      <h2 className=\"title\">Contacts</h2>\n      {contacts.length ? (\n        <>\n          <Filter />\n          <ContactList />\n        </>\n      ) : (\n        <p>There are no contacts yet...</p>\n      )}\n    </Container>\n  );\n};\n\nexport default App;\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport contactActions from \"./contacts-actions\";\n\nconst defaultItems = [\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\n];\n\nconst itemsReducer = createReducer(defaultItems, {\n  [contactActions.addContact]: (state, { payload }) => [payload, ...state],\n  [contactActions.deleteContact]: (state, { payload }) =>\n    state.filter(({ id }) => id !== payload),\n});\n\nconst filterReducer = createReducer(\"\", {\n  [contactActions.changeFilter]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items: itemsReducer,\n  filter: filterReducer,\n});\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\nimport contactsReducer from \"./contacts/contacts-reducer\";\n\nconst middleware = getDefaultMiddleware({\n  serializableCheck: {\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n  },\n});\n\nconst contactsPersistConfig = {\n  key: \"contacts\",\n  storage,\n  blacklist: [\"filter\"],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devtools: process.env.NODE_ENV === \"development\",\n});\n\nconst persistor = persistStore(store);\n\nconst storeObj = { store, persistor };\n\nexport default storeObj;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport storeObj from \"./redux/store\";\nimport \"modern-normalize/modern-normalize.css\";\nimport \"./styles/base.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={storeObj.store}>\n      <PersistGate loading={null} persistor={storeObj.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}